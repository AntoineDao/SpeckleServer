swagger: '2.0'
info:
  description: ''
  version: v0.0.3
  title: Speckle API
  contact:
    name: Dimitrie Stefanescu
    url: 'https://speckle.works'
    email: didimitrie@gmail.com
  license:
    name: ''
host: 'localhost:8080'
basePath: /api
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
security:
  - JWT Token Auth: []
paths:
  /accounts/register:
    post:
      tags:
        - Authentication and Users
      summary: UserRegister
      description: Registers a new user.
      operationId: UserRegister
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PayloadUserRegistration'
      responses:
        '200':
          description: New user successfully registered.
          schema:
            $ref: '#/definitions/ResponseUserRegister'
          examples:
            application/json: |-
              {
              "success": true,
              "message": "User saved. Redirect to login.",
              "apitoken": "JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1OTVmMzllZDkxZjExMWUyMjE1YTU4NzMiLCJpYXQiOjE0OTk0MTI5NzMsImV4cCI6MTU2MjUyODE3M30.ZhEZiYlTwwrM0xv107P3ah1igHA9xue8jWNe-7ykClI",
              "token": "JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1OTVmMzllZDkxZjExMWUyMjE1YTU4NzMiLCJuYW1lIjoiQW5vbnltb3VzIiwiaWF0IjoxNDk5NDEyOTczLCJleHAiOjE0OTk0OTkzNzN9.0sSw7IAXlCt9iD-nwmBZsXoRRZHBeUAMCioJVV1GXrc"
              }
      security: []
  /accounts/login:
    post:
      tags:
        - Authentication and Users
      summary: UserLogin
      description: Login and get jwt token.
      operationId: UserLogin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PayloadUserLogin'
      responses:
        '200':
          description: Status 200
          schema:
            $ref: '#/definitions/ResponseUserLogin'
          examples:
            application/json: |-
              {
                "success": true,
                "token": "JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1OTYwODQ5YjQwNzU3MmVmYTg4YTU0NzAiLCJuYW1lIjoiRGltaXRyaWUiLCJpYXQiOjE0OTk0OTc2OTMsImV4cCI6MTQ5OTU4NDA5M30.BsM4du4R0MIjn_JBRst4Jq3xoyNBS6-Y8NmpUuemvlE",
                "user": {
                  "name": "Dimitrie",
                  "surname": "Doe",
                  "email": "johndoe57@apple.com",
                  "logins": [
                    {
                      "date": 1499497693389
                    }
                  ],
                  "apiToken": "JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1OTYwODQ5YjQwNzU3MmVmYTg4YTU0NzAiLCJpYXQiOjE0OTk0OTc2MjcsImV4cCI6MTU2MjYxMjgyN30.xdXflg0nc4OWknaSiUKOevwhk4PLXhiKku8SkVdpUwA"
                }
              }
      security: []
  /accounts/streams:
    get:
      tags:
        - Authentication and Users
      summary: UserStreamsGet
      description: 'Gets all the streams for a user (identified via the authorization token, so if that''s not present, it won''t work).'
      operationId: UserStreamsGet
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          x-example: JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1OTUyOGFkNDE3NDFkZDU0MmViYjZlZmMiLCJuYW1lIjoiQW5vbnltb3VzIiwiaWF0IjoxNDk4NTgxNzE2LCJleHAiOjE1NjE2OTY5MTZ9.Py9Fwbuj-eiWJDBqZVRv8-uWsTChakhbrLcgKoMS0a4
      responses:
        '200':
          description: Status 200
          schema:
            $ref: '#/definitions/ResponseUserStreamsGet'
      security:
        - JWT Token Auth: []
  /accounts/profile:
    get:
      tags:
        - Authentication and Users
      summary: UserGetProfile
      description: Gets the user's profile.
      operationId: UserGetProfile
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          x-example: JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1OTUyOGFkNDE3NDFkZDU0MmViYjZlZmMiLCJuYW1lIjoiQW5vbnltb3VzIiwiaWF0IjoxNDk4NTgxNzE2LCJleHAiOjE1NjE2OTY5MTZ9.Py9Fwbuj-eiWJDBqZVRv8-uWsTChakhbrLcgKoMS0a4
      responses:
        '200':
          description: Status 200
          schema:
            $ref: '#/definitions/ResponseUserGetProfile'
      security:
        - JWT Token Auth: []
    put:
      tags:
        - Authentication and Users
      summary: UserUpdate
      description: TODO. Should update user profile with new information.
      operationId: UserUpdate
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          x-example: JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1OTUyOGFkNDE3NDFkZDU0MmViYjZlZmMiLCJuYW1lIjoiQW5vbnltb3VzIiwiaWF0IjoxNDk4NTgxNzE2LCJleHAiOjE1NjE2OTY5MTZ9.Py9Fwbuj-eiWJDBqZVRv8-uWsTChakhbrLcgKoMS0a4
      responses:
        '200':
          description: Status 200
      security:
        - JWT Token Auth: []
  /streams:
    post:
      tags:
        - Streams
      summary: StreamCreate
      description: Creates a new stream.
      operationId: StreamCreate
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          x-example: JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1OTUyOGFkNDE3NDFkZDU0MmViYjZlZmMiLCJuYW1lIjoiQW5vbnltb3VzIiwiaWF0IjoxNDk4NTgxNzE2LCJleHAiOjE1NjE2OTY5MTZ9.Py9Fwbuj-eiWJDBqZVRv8-uWsTChakhbrLcgKoMS0a4
      responses:
        '200':
          description: Successfully creates a new stream.
          schema:
            $ref: '#/definitions/ResponseCreateStream'
      security:
        - JWT Token Auth: []
  '/streams/{streamId}':
    get:
      tags:
        - Streams
      summary: StreamGet
      description: |-
        Will return the specified stream. If no `Authorization` header is provided and the stream is private you will get a 401.

        It populates the `objects` array fully.
      operationId: StreamGet
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: false
          type: string
          x-example: JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1OTUyOGFkNDE3NDFkZDU0MmViYjZlZmMiLCJuYW1lIjoiQW5vbnltb3VzIiwiaWF0IjoxNDk4NTgxNzE2LCJleHAiOjE1NjE2OTY5MTZ9.Py9Fwbuj-eiWJDBqZVRv8-uWsTChakhbrLcgKoMS0a4
      responses:
        '200':
          description: Status 200
          schema:
            $ref: '#/definitions/ResponseStreamGet'
          examples:
            application/json: |-
              {
                "success": true,
                "stream": {
                  "_id": "595373ba14fe9b69ed17881c",
                  "updatedAt": "2017-07-06T11:29:16.423Z",
                  "createdAt": "2017-06-28T09:15:38.171Z",
                  "owner": "59528ad41741dd542ebb6efc",
                  "streamId": "BJG6Qe-V-",
                  "children": [
                    "595e1eba29cd8fc88c6711df",
                    "595e1f0ce48999c89ace71fe"
                  ],
                  "parent": null,
                  "layers": [ /*etc*/ ],
                  "objects": [ /*etc*/ ],
                  "sharedWith": [],
                  "private": false,
                  "__v": 23,
                  "layerMaterials": {},
                  "name": "Wrong side of the moon"
                }
              }
        '401':
          description: 'Returned when the stream is private, and the Authorization header is not present, or it the user described by it is not either the owner or in the `sharedWith` array.'
        '404':
          description: Stream not found.
          schema:
            type: object
          examples:
            application/json: |-
              {
                "success": false,
                "message": "No stream found."
              }
    put:
      tags:
        - Streams
      summary: StreamUpdate
      description: |
        Updates a specific stream:
        - it disassebmles the objects into they geometry components, and saves both in the database
        - it overwrites the objects array (if present)
        - it **merges** the layers array (if present)
        - it overwrites the name (if present)
      operationId: StreamUpdate
      consumes:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          x-example: JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1OTUyOGFkNDE3NDFkZDU0MmViYjZlZmMiLCJuYW1lIjoiQW5vbnltb3VzIiwiaWF0IjoxNDk4NTgxNzE2LCJleHAiOjE1NjE2OTY5MTZ9.Py9Fwbuj-eiWJDBqZVRv8-uWsTChakhbrLcgKoMS0a4
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PayloadStreamUpdate'
      responses:
        '200':
          description: On success
          schema:
            $ref: '#/definitions/ResponseStreamUpdate'
        '401':
          description: Status 401
        '404':
          description: Status 404
      security:
        - JWT Token Auth: []
    delete:
      tags:
        - Streams
      summary: StreamDelete
      description: TODO
      operationId: StreamDelete
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          x-example: JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1OTUyOGFkNDE3NDFkZDU0MmViYjZlZmMiLCJuYW1lIjoiQW5vbnltb3VzIiwiaWF0IjoxNDk4NTgxNzE2LCJleHAiOjE1NjE2OTY5MTZ9.Py9Fwbuj-eiWJDBqZVRv8-uWsTChakhbrLcgKoMS0a4
      responses:
        '200':
          description: Status 200
      security:
        - JWT Token Auth: []
    parameters:
      - name: streamId
        in: path
        required: true
        type: string
        description: The stream's id.
        x-example: SyLPkGgNW
  '/streams/{streamId}/meta':
    get:
      tags:
        - Streams
      summary: StreamGetMeta
      description: Retrieves the stream without populating the objects array.
      operationId: StreamGetMeta
      parameters:
        - name: Authorization
          in: header
          required: false
          type: string
          x-example: JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1OTUyOGFkNDE3NDFkZDU0MmViYjZlZmMiLCJuYW1lIjoiQW5vbnltb3VzIiwiaWF0IjoxNDk4NTgxNzE2LCJleHAiOjE1NjE2OTY5MTZ9.Py9Fwbuj-eiWJDBqZVRv8-uWsTChakhbrLcgKoMS0a4
      responses:
        '200':
          description: Status 200
          schema:
            $ref: '#/definitions/ResponseStreamGetMeta'
    put:
      tags:
        - Streams
      summary: StreamUpdateMeta
      description: Updates stream name and layers.
      operationId: StreamUpdateMeta
      consumes: []
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PayloadStreamUpdateMeta'
      responses:
        '200':
          description: Status 200
      security:
        - JWT Token Auth: []
    parameters:
      - name: streamId
        in: path
        required: true
        type: string
  '/streams/{streamId}/layers':
    get:
      tags:
        - Streams
      summary: StreamsGetLayers
      description: Retrieves the stream's layers
      operationId: StreamsGetLayers
      parameters: []
      responses:
        '200':
          description: Status 200
          schema:
            $ref: '#/definitions/ResponseStreamGetLayers'
    put:
      tags:
        - Streams
      summary: StreamsUpdateLayers
      description: Updates stream layers.
      operationId: StreamsUpdateLayers
      consumes: []
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PayloadStreamUpdateLayers'
      responses:
        '200':
          description: Status 200
      security:
        - JWT Token Auth: []
    parameters:
      - name: streamId
        in: path
        required: true
        type: string
  '/streams/{streamId}/name':
    get:
      tags:
        - Streams
      summary: StreamGetName
      operationId: StreamGetName
      parameters: []
      responses:
        '200':
          description: Status 200
          schema:
            $ref: '#/definitions/ResponseStreamGetName'
    put:
      tags:
        - Streams
      summary: StreamUpdateName
      operationId: StreamUpdateName
      consumes: []
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
      responses:
        '200':
          description: Status 200
    parameters:
      - name: streamId
        in: path
        required: true
        type: string
  '/streams/{streamId}/duplicate':
    post:
      tags:
        - Streams
      summary: StreamDuplicate
      description: |-
        Duplicate the `streamId` and saves it in a database. The clone will automatically have it's parent field set to the original stream's `_id`. 
        Furthermore, the clone's `_id` will be pushed into the parent's children array.
      operationId: StreamDuplicate
      parameters:
        - name: Authorization
          in: header
          required: false
          type: string
          x-example: JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1OTUyOGFkNDE3NDFkZDU0MmViYjZlZmMiLCJuYW1lIjoiQW5vbnltb3VzIiwiaWF0IjoxNDk4NTgxNzE2LCJleHAiOjE1NjE2OTY5MTZ9.Py9Fwbuj-eiWJDBqZVRv8-uWsTChakhbrLcgKoMS0a4
      responses:
        '200':
          description: Status 200
          schema:
            $ref: '#/definitions/ResponseStreamDuplicate'
          examples:
            application/json: |-
              {
                "success": true,
                "clone": {
                  "_id": "595e1f0ce48999c89ace71fe",
                  "streamId": "BkVMJsiN-"
                },
                "parent": {
                  "_id": "595373ba14fe9b69ed17881c",
                  "streamId": "BJG6Qe-V-",
                  "children": [
                    "595e1e50523ae9c8726ed78c",
                    "595e1eba29cd8fc88c6711df",
                    "595e1f0ce48999c89ace71fe"
                  ]
                }
              }
      security:
        - JWT Token Auth: []
    parameters:
      - name: streamId
        in: path
        required: true
        type: string
        description: The stream's id.
        default: BJG6Qe-V-
  /objects:
    post:
      tags:
        - Objects
      summary: ObjectCreate
      description: Creates an object.
      operationId: ObjectCreate
      consumes: []
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PayloadCreateObject'
          x-examples:
            application/json: |-
              {
                "object": {
                  "properties": {
                    "watwat": "\"HelloWorld\"",
                    "watwoot": "\"HalloWat\""
                  },
                  "displayValue": {
                    "properties": {},
                    "vertices": [
              etc
                    ],
                    "faces": [
              etc
                    ],
                    "colors": [],
                    "type": "Mesh",
                    "geometryHash": "Mesh.4cba06597ef0d4ce6a3e0a946258ddb8"
                  },
                  "base64": "",
                  "provenance": "ON",
                  "type": "Brep",
                  "geometryHash": "Brep.d4e1e9553316b31dbd3a06f65aca33d7"
                }
              }
      responses:
        '200':
          description: Status 200
          schema:
            $ref: '#/definitions/ResponseObjectCreate'
      security:
        - JWT Token Auth: []
    put:
      tags:
        - Objects
      summary: ObjectUpdateBulk
      description: |-
        Updates SpeckleObjects.

        It will recursively look through the object's properties and store any "heavy" geometries (Brep, Mesh, Curve and Polyline) in the Geometries database. All other geometries are stored within the object itself.

        Response will contain the `objects` and `geometries` arrays of the saved documents.
      operationId: ObjectUpdateBulk
      consumes:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          x-example: JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1OTUyOGFkNDE3NDFkZDU0MmViYjZlZmMiLCJuYW1lIjoiQW5vbnltb3VzIiwiaWF0IjoxNDk4NTgxNzE2LCJleHAiOjE1NjE2OTY5MTZ9.Py9Fwbuj-eiWJDBqZVRv8-uWsTChakhbrLcgKoMS0a4
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              objects:
                type: array
                items:
                  type: object
                  properties:
                    hash:
                      type: string
                      description: object's hash
            description: Should contain an array of objects to store.
      responses:
        '200':
          description: Status 200
      security:
        - JWT Token Auth: []
  /objects/createmany:
    post:
      tags:
        - Objects
      summary: ObjectCreateBulk
      description: |-
        Creates and stores in the database a SpeckleObject.

        It will recursively look through the object's properties and store any "heavy" geometries (Brep, Mesh, Curve and Polyline) in the Geometries database. All other geometries are stored within the object itself.

        Response will contain the `objects` and `geometries` arrays of the saved documents.
      operationId: ObjectCreateBulk
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PayloadCreateObjectsMany'
      responses:
        '200':
          description: Status 200
          schema:
            $ref: '#/definitions/ResponseObjectCreate'
          examples:
            application/json: |-
              {
                "success": true,
                "objects": [
                  "59575428e3290e5c9c1b3122",
                  "59575428e3290e5c9c1b3123",
                  "59575428e3290e5c9c1b3124"
                ],
                "geometries": [
                  "Mesh.2c3176b21893ac1cb0b69d83f49fa1f6",
                  "Polyline.b8cabb148761a918b22128c8f05b1d47"
                ]
              }
  /objects/getmany:
    get:
      tags:
        - Objects
      summary: ObjectsGetMany
      operationId: ObjectsGetMany
      parameters: []
      responses:
        '200':
          description: Status 200
  '/objects/{objectId}':
    get:
      tags:
        - Objects
      summary: ObjectGet
      description: |+
        Gets a SpeckleObject from the database. It will automatically populate geometry fields for "heavy types", that is `'Mesh' || 'Brep' || 'Curve' ||  'Polyline'`.
      operationId: ObjectGet
      parameters:
        - name: Authorization
          in: header
          required: false
          type: string
          x-example: JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1OTUyOGFkNDE3NDFkZDU0MmViYjZlZmMiLCJuYW1lIjoiQW5vbnltb3VzIiwiaWF0IjoxNDk4NTgxNzE2LCJleHAiOjE1NjE2OTY5MTZ9.Py9Fwbuj-eiWJDBqZVRv8-uWsTChakhbrLcgKoMS0a4
      responses:
        '200':
          description: Object found
          schema:
            $ref: '#/definitions/ResponseObjectGet'
        '404':
          description: Status 404
    put:
      tags:
        - Objects
      summary: ObjectUpdate
      description: Updates an object by its id.
      parameters: []
      responses:
        '200':
          description: Status 200
      security:
        - JWT Token Auth: []
    parameters:
      - name: objectId
        in: path
        required: true
        type: string
  '/geometry/{geometryHash}':
    get:
      tags:
        - Objects
      summary: GeometryGet
      description: |+
        Gets a speckle geometry document by its hash. 

      operationId: GeometryGet
      parameters: []
      responses:
        '200':
          description: Status 200
          schema:
            $ref: '#/definitions/ResponseGeometryGet'
        '404':
          description: Status 404
    parameters:
      - name: geometryHash
        in: path
        required: true
        type: string
securityDefinitions:
  JWT Token Auth:
    type: apiKey
    name: Authorization
    in: header
definitions:
  Data Stream:
    type: object
    required:
      - streamId
      - name
      - objects
      - layers
    properties:
      streamId:
        type: string
        description: the stream's short id.
      owner:
        type: string
        description: the owner's user id.
      private:
        type: boolean
        default: false
      name:
        type: string
        description: the data stream's name
        default: Anonymous Stream
      objects:
        type: array
        description: An array of SpeckleObject ids.
        items:
          $ref: '#/definitions/SpeckleObject'
      layers:
        type: array
        description: An array of speckle layers.
        items:
          $ref: '#/definitions/Speckle Layer'
      parent:
        type: string
        description: 'Parent stream''s id, if any. If null, this is a `root` stream.'
      children:
        type: array
        description: 'Any offspring that this stream might have (created with `/duplicate/{streamId}`'
        items:
          type: string
    description: Describes a data stream. The data stream's `streamId` will define the channel on which real-time updates will be distributed on the websocket server.
  SpeckleObject:
    type: object
    required:
      - type
    discriminator: type
    properties:
      type:
        type: string
        description: object's type
        enum:
          - Boolean
          - Number
          - String
          - Interval
          - Interval2d
          - Point
          - Vector
          - Plane
          - Line
          - Rectangle
          - Circle
          - Box
          - Polyline
          - Curve
          - Mesh
          - Brep
          - 'Null'
      hash:
        type: string
        description: Object's unique hash. It's generated server-side from `JSON.stringify( obj.properties ) + obj.geometryHash` using a murmurhash3 128bit function.
      geometryHash:
        type: string
        description: 'It the object contains geometry, it should have a geometry hash.'
        example: Polyline.b8cabb148761a918b22128c8f05b1d47
      applicationId:
        type: string
        description: 'If this object is not an ephemeral object, (ie coming from Grasshopper or Dynamo), and has a unique, persistent and consistent application id, this is where to store said guid.'
      properties:
        type: object
        description: 'Anything goes in here, including other objects.'
        example: '{ objectIsSad: false, bimLevel: "infinity", nestedTurtle: { ... }}'
    description: Minimal representation of a SpeckleObject. Contains other values depending on specific class. See the .net docs for more info.
  SpeckleBoolean:
    allOf: 
      - $ref: '#/definitions/SpeckleObject'
      - type: object
        properties:
          type:
            default: Boolean
          value:
            type: boolean
  SpeckleNumber:
    allOf: 
      - $ref: '#/definitions/SpeckleObject'
      - type: object
        properties:
          type:
            default: Number
          value:
            type: number         
  SpeckleString:
    allOf: 
      - $ref: '#/definitions/SpeckleObject'
      - type: object
        properties:
          type:
            default: String
          value:
            type: string
  SpeckleInterval: 
    allOf: 
      - $ref: '#/definitions/SpeckleObject'
      - type: object
        properties:
          type:
            default: Interval
          start:
            type: number
          end: 
            type: number
  SpeckleInterval2d: 
    allOf: 
      - $ref: '#/definitions/SpeckleObject'
      - type: object
        properties:
          U:
            allOf: 
              - $ref: '#/definitions/SpeckleInterval'
          V:
            allOf: 
              - $ref: '#/definitions/SpeckleInterval'
  SpecklePoint:
    allOf: 
      - $ref: '#/definitions/SpeckleObject'
      - type: object
        properties:
          type:
            default: Point
          value:
            description: An array containing the XYZ coords of the point.
            type: array
            items:
              type: number
  SpeckleVector: 
    allOf: 
      - $ref: '#/definitions/SpeckleObject'
      - type: object
        properties:
          type: 
            default: Vector
          value:
            description: An array containing the XYZ coords of the vector.
            type: array
            items: 
              type: number
  SpecklePlane:
    allOf:
      - $ref: '#/definitions/SpeckleObject'
      - type: object
        properties: 
          type: 
            default: Plane
          Origin: 
            allOf:
              - $ref: '#/definitions/SpecklePoint'
          Normal:
            allOf:
              - $ref: '#/definitions/SpeckleVector'
          Xdir:
            allOf:
              - $ref: '#/definitions/SpeckleVector'
          Ydir:
            allOf:
              - $ref: '#/definitions/SpeckleVector'
  SpeckleLine: 
    allOf:
      - $ref: '#/definitions/SpeckleObject'
      - type: object
        properties:
          type: 
            default: Line 
          start: 
            allOf:
              - $ref: '#/definitions/SpecklePoint'
          end: 
            allOf:
              - $ref: '#/definitions/SpecklePoint'
  SpeckleRectangle:
    allOf:
      - $ref: '#/definitions/SpeckleObject'
      - type: object
        properties:
          type:
            default: Rectangle
          A:
            allOf:
              - $ref: '#/definitions/SpecklePoint' 
          B:
            allOf:
              - $ref: '#/definitions/SpecklePoint' 
          C:
            allOf:
              - $ref: '#/definitions/SpecklePoint' 
          D:
            allOf:
              - $ref: '#/definitions/SpecklePoint' 
  SpeckleCircle: 
    allOf:
      - $ref: '#/definitions/SpeckleObject'
      - type: object
        properties: 
          type:
            default: Circle
          radius:
            type: number
          center:
            allOf:
              - $ref: '#/definitions/SpecklePoint'
          normal:
            allOf:
              - $ref: '#/definitions/SpeckleVector'
  SpeckleBox:
    allOf:
      - $ref: '#/definitions/SpeckleObject'
      - type: object
        properties: 
          type:
            default: Box
          basePlane:
            allOf:
              - $ref: '#/definitions/SpecklePlane'
          xSize:
            allOf:
              - $ref: '#/definitions/SpeckleInterval'
          ySize:
            allOf:
              - $ref: '#/definitions/SpeckleInterval'
          zSize:
            allOf:
              - $ref: '#/definitions/SpeckleInterval'
  SpecklePolyline:
    allOf:
      - $ref: '#/definitions/SpeckleObject'
      - type: object
        properties: 
          type:
            default: Polyline
          value:
            type: array
            items: 
              type: number
  SpeckleCurve:
    allOf: 
      - $ref: '#/definitions/SpeckleObject'
      - type: object
        properties:
          type:
            default: Curve
          base64:
            type: string
          provenance:
            type: string
          displayValue:
            allOf:
              - $ref: '#/definitions/SpecklePolyline'
  SpeckleMesh:
    allOf:
      - $ref: '#/definitions/SpeckleObject'
      - type: object
        properties:
          type: 
            default: Mesh
          vertices:
            type: array
            items:
              type: number
          faces:
            type: array
            items:
              type: number
          colors:
            type: array
            items:
              type: number
  SpeckleBrep:
    allOf: 
      - $ref: '#/definitions/SpeckleObject'
      - type: object
        properties: 
          type:
            default: Brep
          base64: 
            type: String
          provenance:
            type: String
          displayValue:
            allOf:
              - $ref: '#/definitions/SpeckleMesh'
  Speckle Layer:
    type: object
    required:
      - guid
      - name
      - objectCount
      - orderIndex
      - startIndex
    properties:
      name:
        type: string
        description: Layer's name
      guid:
        type: string
        description: Layer's guid (must be unique)
      orderIndex:
        type: integer
        description: Describes this layer's position in the list of layers.
      startIndex:
        type: number
        description: The index of the first object relative to the stream's objects array
      objectCount:
        type: number
        description: How many objects does this layer have.
      topology:
        type: string
        description: String describing the nested tree structure (Gh centric).
        example: 0;0;0;0-2 0;0;0;1-2
      properties:
        $ref: '#/definitions/Layer Properties'
    description: 'Describes a speckle layer. To assign objects to a speckle layer, you''ll need to start at `objects[ layer.startIndex ]` and finish at `objects[ layer.startIndex + layer.objectCount ]`.'
  Layer Properties:
    type: object
    properties:
      color:
        type: object
        properties:
          a:
            type: number
            description: alpha value
            default: 1
          hex:
            type: string
            description: hex color value
            default: '#d4d4d4'
            example: '#d4d4d4'
      visible:
        type: boolean
        description: toggles layer visibility.
      pointsize:
        type: number
        description: defines point size in threejs
      linewidth:
        type: number
        description: defines line thickness in threejs
      shininess:
        type: number
        description: says it all. speckle is superficial.
      smooth:
        type: boolean
        description: smooth shading toggle
      showEdges:
        type: boolean
        description: display edges or not yo.
      wireframe:
        type: boolean
        description: i'm bored.
    description: 'Holds stream layer properties, mostly for displaying purposes. This object will be filled up with garbage from threejs and others, but below is a minimal schema.'
  User:
    type: object
    required:
      - apitoken
      - email
      - name
    properties:
      apitoken:
        type: string
        description: a signed jwt token that expires in 1 year.
      email:
        type: string
        description: user's email
      name:
        type: string
        description: User's given name
      surname:
        type: string
        description: User's family name
      company:
        type: string
        description: Users's company
      logins:
        type: array
        description: an array storing each time the user logged in.
        items:
          type: string
          format: date
    description: Vaguely describes a speckle user document.
  PayloadUserRegistration:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
      password:
        type: string
      name:
        type: string
      surname:
        type: string
      company:
        type: string
    description: User registration payload.
  PayloadUserLogin:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
      password:
        type: string
    description: UserLogin Payload
  PayloadStreamUpdate:
    type: object
    properties:
      objects:
        type: array
        items:
          $ref: '#/definitions/SpeckleObject'
      layers:
        type: array
        items:
          $ref: '#/definitions/Speckle Layer'
      name:
        type: string
    description: model payload for stream update.
  PayloadStreamUpdateMeta:
    type: object
    properties:
      layers:
        type: array
        items:
          $ref: '#/definitions/Speckle Layer'
      name:
        type: string
  PayloadStreamUpdateLayers:
    type: object
    required:
      - layers
    properties:
      layers:
        type: array
        items:
          $ref: '#/definitions/Speckle Layer'
  PayloadCreateObject:
    type: object
    required:
      - object
    properties:
      object:
        $ref: '#/definitions/SpeckleObject'
  PayloadCreateObjectsMany:
    type: object
    required:
      - objects
    properties:
      objects:
        type: array
        items:
          $ref: '#/definitions/SpeckleObject'
  ResponseUserStreamsGet:
    type: object
    required:
      - data
      - success
    properties:
      success:
        type: boolean
      data:
        type: array
        items:
          $ref: '#/definitions/Data Stream'
  ResponseCreateStream:
    type: object
    required:
      - stream
      - success
    properties:
      success:
        type: boolean
      stream:
        $ref: '#/definitions/Data Stream'
  ResponseStreamGet:
    type: object
    required:
      - success
    properties:
      success:
        type: boolean
      stream:
        $ref: '#/definitions/Data Stream'
  ResponseStreamUpdate:
    type: object
    required:
      - streamId
      - success
    properties:
      success:
        type: boolean
      message:
        type: string
      streamId:
        type: string
  ResponseStreamGetMeta:
    type: object
    required:
      - success
    properties:
      success:
        type: boolean
      stream:
        $ref: '#/definitions/Data Stream'
  ResponseStreamDuplicate:
    type: object
    required:
      - clone
      - parent
      - success
    properties:
      success:
        type: boolean
      clone:
        required:
          - _id
          - streamId
        type: object
        properties:
          _id:
            type: string
            description: database id
          streamId:
            type: string
            description: stream id
      parent:
        required:
          - _id
          - children
          - streamId
        type: object
        properties:
          _id:
            type: string
          streamId:
            type: string
          children:
            type: array
            description: 'array containing all of the parent''s children so far, including the newly minted one.'
            items:
              type: string
  ResponseObjectGet:
    type: object
    required:
      - speckleObject
      - success
    properties:
      success:
        type: boolean
      speckleObject:
        $ref: '#/definitions/SpeckleObject'
  ResponseStreamGetLayers:
    type: object
    required:
      - layers
      - success
    properties:
      success:
        type: boolean
      layers:
        type: array
        items:
          $ref: '#/definitions/Speckle Layer'
  ResponseStreamGetName:
    type: object
    required:
      - name
      - success
    properties:
      success:
        type: boolean
      name:
        type: string
  ResponseObjectCreate:
    type: object
    required:
      - success
    properties:
      success:
        type: boolean
      objects:
        type: array
        description: object ids of saved objects.
        items:
          type: string
      geometries:
        type: array
        description: 'geometry hashes of saved geometries, if any.'
        items:
          type: string
  ResponseGeometryGet:
    type: object
    required:
      - success
    properties:
      success:
        type: boolean
      speckleGeometry:
        $ref: '#/definitions/SpeckleObject'
  ResponseUserLogin:
    type: object
    required:
      - success
      - token
      - user
    properties:
      success:
        type: boolean
      token:
        type: string
        description: A jwt token that will expire in 1 day.
      user:
        $ref: '#/definitions/User'
  ResponseUserRegister:
    type: object
    required:
      - apitoken
      - message
      - success
      - token
    properties:
      success:
        type: boolean
      message:
        type: string
      apitoken:
        type: string
        description: 'expires in like... 1 year :)'
      token:
        type: string
        description: expires in 1 day.
  ResponseUserGetProfile:
    type: object
    required:
      - success
      - user
    properties:
      success:
        type: boolean
      user:
        $ref: '#/definitions/User'
